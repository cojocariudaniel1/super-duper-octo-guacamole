CREATE CONSTRAINT IF NOT EXISTS FOR (u:User) REQUIRE u.id IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (i:Interest) REQUIRE i.name IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (p:Post) REQUIRE p.id IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (c:Comment) REQUIRE c.id IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (com:Community) REQUIRE com.name IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (t:Tag) REQUIRE t.name IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (n:Notification) REQUIRE n.id IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (m:Message) REQUIRE m.id IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (s:Session) REQUIRE s.id IS UNIQUE;

// Sample Data and Relationships
MERGE (user1:User {id: '1', name: 'Alice', age: 28, email: 'alice@example.com', reputation: 0})
MERGE (user2:User {id: '2', name: 'Bob', age: 32, email: 'bob@example.com', reputation: 0})
MERGE (user3:User {id: '3', name: 'Charlie', age: 25, email: 'charlie@example.com', reputation: 0})

MERGE (interest1:Interest {name: 'Technology'})
MERGE (interest2:Interest {name: 'Sports'})

MERGE (post1:Post {id: '101', content: 'Exploring Neo4j for social graphs', timestamp: '2025-02-02'})
MERGE (post2:Post {id: '102', content: 'Best programming languages in 2025', timestamp: '2025-02-01'})

MERGE (comment1:Comment {id: '201', text: 'Great insights!', timestamp: '2025-02-02'})
MERGE (comment2:Comment {id: '202', text: 'I prefer Python!', timestamp: '2025-02-01'})

MERGE (community1:Community {name: 'Neo4j Enthusiasts'})
MERGE (community2:Community {name: 'AI Researchers'})

MERGE (tag1:Tag {name: 'GraphDB'})
MERGE (tag2:Tag {name: 'Programming'})

MERGE (notification1:Notification {id: '301', message: 'You have a new comment', timestamp: '2025-02-02'})
MERGE (message1:Message {id: '401', content: 'Hey, want to discuss Neo4j?', timestamp: '2025-02-02'})
MERGE (session1:Session {id: '501', status: 'Active', last_active: '2025-02-02'})

// Relationships with Friend Requests
MERGE (user1)-[:REQUESTED_FRIEND]->(user2)
MERGE (user2)-[:FRIEND_WITH]->(user3)

// Interests
MERGE (user1)-[:INTERESTED_IN]->(interest1)
MERGE (user2)-[:INTERESTED_IN]->(interest2)

// Post creation
MERGE (user1)-[:CREATED]->(post1)
MERGE (user2)-[:CREATED]->(post2)

// Commenting on posts
MERGE (post1)-[:HAS_COMMENT]->(comment1)
MERGE (post2)-[:HAS_COMMENT]->(comment2)

// Community interactions
MERGE (user1)-[:MEMBER_OF]->(community1)
MERGE (user3)-[:MEMBER_OF]->(community2)
MERGE (community1)-[:HAS_POST]->(post1)
MERGE (community2)-[:HAS_POST]->(post2)

// Likes with reputation update
MERGE (user2)-[:LIKED]->(post1)
SET user1.reputation = user1.reputation + 10
MERGE (user3)-[:LIKED]->(post2)
SET user2.reputation = user2.reputation + 10
MERGE (user2)-[:LIKED]->(comment1)
SET user1.reputation = user1.reputation + 5
MERGE (user1)-[:LIKED]->(comment2)
SET user2.reputation = user2.reputation + 5

// Tagging system
MERGE (post1)-[:TAGGED_AS]->(tag1)
MERGE (post2)-[:TAGGED_AS]->(tag2)
MERGE (comment1)-[:TAGGED_AS]->(tag1)
MERGE (comment2)-[:TAGGED_AS]->(tag2)

// User connections
MERGE (user1)-[:FOLLOWS]->(user2)
MERGE (user2)-[:FOLLOWS]->(user3)

// Notifications and messages
MERGE (user1)-[:RECEIVED]->(notification1)
MERGE (user2)-[:SENT]->(message1)
MERGE (message1)-[:RECEIVED_BY]->(user3)

// User sessions
MERGE (user1)-[:HAS_SESSION]->(session1)
MERGE (user3)-[:HAS_SESSION]->(session1)

// Blocking users
MERGE (user1)-[:BLOCKED]->(user3);
