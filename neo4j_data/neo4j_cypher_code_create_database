// First clear the database
MATCH ()-[r]->() DELETE r;
MATCH (n) DELETE n;

// Create constraints
CREATE CONSTRAINT IF NOT EXISTS FOR (u:User) REQUIRE u.id IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (i:Interest) REQUIRE i.name IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (p:Post) REQUIRE p.id IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (c:Comment) REQUIRE c.id IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (com:Community) REQUIRE com.name IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (t:Tag) REQUIRE t.name IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (n:Notification) REQUIRE n.id IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (m:Message) REQUIRE m.id IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (s:Session) REQUIRE s.id IS UNIQUE;

// Create users
MERGE (user38599:User {id: '38599', username: 'user38599', points: 15, email: 'user38599@topikka.com', password: 'hashed_password', reputation: 15});
MERGE (gaudy3ip:User {id: '45678', username: 'Gaudy3!p', points: 190, email: 'gaudy3ip@topikka.com', password: 'hashed_password', reputation: 190});
MERGE (qualAnon:User {id: '12345', username: 'QualAnon', points: 550, email: 'qualanon@topikka.com', password: 'hashed_password', reputation: 550});

// Create communities
MERGE (conspiracyCircle:Community {name: 'ConspiracyCircle', description: 'Discuss all conspiracy theories here'});
MERGE (gamingGrounds:Community {name: 'GamingGrounds', description: 'Everything about gaming'});
MERGE (popCulturePulse:Community {name: 'PopCulturePulse', description: 'Latest in pop culture'});
MERGE (theBackrooms:Community {name: 'TheBackrooms', description: 'Creepy backroom stories'});
MERGE (memethis:Community {name: 'Memethis', description: 'Meme sharing community'});
MERGE (photoshoppingFails:Community {name: 'PhotoshoppingFails', description: 'Funny photoshop disasters'});
MERGE (roadAccidents:Community {name: 'RoadAccidents', description: 'Discuss road safety and accidents'});

// Create posts
MERGE (post1:Post {
  id: '101',
  title: 'When photoshop goes horribly wrong',
  content: '<p>So, I was trying to help my friend out by editing a photo for her social media, but what I thought would be a simple touch-up turned into a full-on disaster. ðŸ˜…</p><p>I was trying to smooth out some skin imperfections, but somehow I ended up overdoing it. Instead of subtle editing, I ended up with a weirdly smooth, almost cartoonish face. Her eyes became huge, her nose disappeared, and her smile... let\'s just say it looked like it was drawn by a 5-year-old. ðŸ˜‚</p><p>At first, I tried to fix it by adding some shadows, but I ended up making things look even worse. I couldn\'t stop laughing at the mess I created, but I felt so bad, so I sent it to her with the caption: "How do you like your new animated version?"</p><p>She didn\'t find it as funny as I did, but hey, at least we laughed about it afterward. Anyone else had a Photoshop fail that went completely off the rails? I could use some comfort!</p>',
  timestamp: datetime() - duration('P3D'),
  likes: 103,
  dislikes: 25,
  comments: 107,
  visibility: 'PUBLIC'
});

MERGE (post2:Post {
  id: '102',
  title: 'Had a car accident, could use some advice',
  content: '<p>Hey everyone, I\'m reaching out because I\'m feeling a bit overwhelmed after being in a car accident, and I could really use some advice or just to hear from others who might have gone through something similar.</p><p>So, here\'s what happened: I was driving home from work the other day, just like any other day, when out of nowhere, a car ran a red light and slammed into the front of my vehicle. Honestly, I\'m still kind of in shock.</p><p>The damage to my car is significant, especially to the bumper and fender, but thankfully, I wasn\'t seriously hurtâ€”just some soreness and a few bruises. It\'s a relief, but it\'s still been a lot to process.</p><ul><li>Insurance confusion: I\'ve filed the claim, but I\'m not really sure what to expect next. The insurance company mentioned something about a "coverage assessment," and I\'m feeling kind of lost in the whole process. Anyone been through this?</li><li>Car repair worries: My car definitely needs some work, and I\'m trying to figure out where to go for repairs. I want to make sure I find a good place that won\'t rip me off, but I\'m just not sure how to go about it.</li><li>Emotional stuff: Honestly, I didn\'t expect this part to hit me so hard, but I\'ve been feeling pretty anxious and shaken up. I\'m nervous about getting back behind the wheel. Has anyone experienced this after an accident? How did you get through it?</li></ul><p>I know I\'m lucky that things weren\'t worse, but it\'s still a lot to handle.</p>',
  timestamp: datetime() - duration('PT1H'),
  likes: 20,
  dislikes: 5,
  comments: 20,
  visibility: 'PUBLIC'
});

// Create tags
MERGE (tag1:Tag {name: 'WhatDoYouThink'});
MERGE (tag2:Tag {name: 'AnonymousConfessions'});
MERGE (tag3:Tag {name: 'UnfilteredTruth'});
MERGE (tag4:Tag {name: 'CarAccident'});
MERGE (tag5:Tag {name: 'AccidentRecovery'});
MERGE (tag6:Tag {name: 'DrivingAnxiety'});
MERGE (tag7:Tag {name: 'CarInsurance'});
MERGE (tag8:Tag {name: 'AutoRepair'});
MERGE (tag9:Tag {name: 'AccidentExperience'});
MERGE (tag10:Tag {name: 'PostAccident'});
MERGE (tag11:Tag {name: 'SupportNeeded'});
MERGE (tag12:Tag {name: 'EmotionalImpact'});
MERGE (tag13:Tag {name: 'RoadToRecovery'});
MERGE (tag14:Tag {name: 'CarSafety'});
MERGE (tag15:Tag {name: 'AccidentAdvice'});
MERGE (tag16:Tag {name: 'fail'});
MERGE (tag17:Tag {name: 'photoshop'});

// Create friend relationships
MATCH (u1:User {username: 'user38599'}), (u2:User {username: 'Gaudy3!p'})
MERGE (u1)-[:FRIEND_WITH {timestamp: datetime()}]->(u2);

// Create community memberships
MATCH (u:User {username: 'QualAnon'}), (c1:Community {name: 'ConspiracyCircle'}),
      (c2:Community {name: 'GamingGrounds'}), (c3:Community {name: 'PopCulturePulse'})
MERGE (u)-[:MEMBER_OF {role: 'MEMBER', timestamp: datetime()}]->(c1)
MERGE (u)-[:MEMBER_OF {role: 'MEMBER', timestamp: datetime()}]->(c2)
MERGE (u)-[:MEMBER_OF {role: 'MEMBER', timestamp: datetime()}]->(c3);

MATCH (u:User {username: 'Gaudy3!p'}), (c:Community {name: 'RoadAccidents'})
MERGE (u)-[:MEMBER_OF {role: 'MEMBER', timestamp: datetime()}]->(c);

MATCH (u:User {username: 'user38599'}), (c1:Community {name: 'ConspiracyCircle'}),
      (c2:Community {name: 'GamingGrounds'}), (c3:Community {name: 'PopCulturePulse'})
MERGE (u)-[:MEMBER_OF {role: 'MEMBER', timestamp: datetime()}]->(c1)
MERGE (u)-[:MEMBER_OF {role: 'MEMBER', timestamp: datetime()}]->(c2)
MERGE (u)-[:MEMBER_OF {role: 'MEMBER', timestamp: datetime()}]->(c3);

// Create post relationships
MATCH (u:User {username: 'QualAnon'}), (p:Post {id: '101'})
MERGE (u)-[:CREATED {timestamp: datetime() - duration('P3D')}]->(p);

MATCH (u:User {username: 'Gaudy3!p'}), (p:Post {id: '102'})
MERGE (u)-[:CREATED {timestamp: datetime() - duration('PT1H')}]->(p);

// Connect posts to communities
MATCH (c:Community {name: 'PhotoshoppingFails'}), (p:Post {id: '101'})
MERGE (c)-[:HAS_POST {timestamp: datetime() - duration('P3D')}]->(p);

MATCH (c:Community {name: 'RoadAccidents'}), (p:Post {id: '102'})
MERGE (c)-[:HAS_POST {timestamp: datetime() - duration('PT1H')}]->(p);

// Tag posts
MATCH (p:Post {id: '101'}), (t1:Tag {name: 'WhatDoYouThink'}),
      (t2:Tag {name: 'AnonymousConfessions'}), (t3:Tag {name: 'fail'}),
      (t4:Tag {name: 'photoshop'})
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('P3D')}]->(t1)
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('P3D')}]->(t2)
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('P3D')}]->(t3)
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('P3D')}]->(t4);

MATCH (p:Post {id: '102'}),
      (t1:Tag {name: 'CarAccident'}), (t2:Tag {name: 'AccidentRecovery'}),
      (t3:Tag {name: 'DrivingAnxiety'}), (t4:Tag {name: 'CarInsurance'}),
      (t5:Tag {name: 'AutoRepair'}), (t6:Tag {name: 'AccidentExperience'}),
      (t7:Tag {name: 'PostAccident'}), (t8:Tag {name: 'SupportNeeded'}),
      (t9:Tag {name: 'EmotionalImpact'}), (t10:Tag {name: 'RoadToRecovery'}),
      (t11:Tag {name: 'CarSafety'}), (t12:Tag {name: 'AccidentAdvice'})
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('PT1H')}]->(t1)
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('PT1H')}]->(t2)
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('PT1H')}]->(t3)
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('PT1H')}]->(t4)
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('PT1H')}]->(t5)
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('PT1H')}]->(t6)
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('PT1H')}]->(t7)
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('PT1H')}]->(t8)
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('PT1H')}]->(t9)
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('PT1H')}]->(t10)
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('PT1H')}]->(t11)
MERGE (p)-[:TAGGED_AS {timestamp: datetime() - duration('PT1H')}]->(t12);

// Add likes and update reputation
MATCH (u1:User {username: 'user38599'}), (u2:User {username: 'Gaudy3!p'}),
      (p:Post {id: '101'}), (author:User {username: 'QualAnon'})
MERGE (u1)-[:LIKED {timestamp: datetime() - duration('P2D')}]->(p)
MERGE (u2)-[:LIKED {timestamp: datetime() - duration('P1D')}]->(p)
SET author.reputation = author.reputation + 20;

MATCH (u:User {username: 'QualAnon'}), (p:Post {id: '102'}),
      (author:User {username: 'Gaudy3!p'})
MERGE (u)-[:LIKED {timestamp: datetime() - duration('PT30M')}]->(p)
SET author.reputation = author.reputation + 10;

// Add comments
MERGE (comment1:Comment {id: '201', text: 'This happened to me too! I once made someone look like an alien by accident ðŸ˜‚', timestamp: datetime() - duration('P2D'), likes: 15, dislikes: 2});
MERGE (comment2:Comment {id: '202', text: 'Sorry to hear about your accident. The anxiety will fade with time - just take it slow.', timestamp: datetime() - duration('PT30M'), likes: 8, dislikes: 0});

MATCH (p:Post {id: '101'}), (c:Comment {id: '201'}), (u:User {username: 'user38599'})
MERGE (p)-[:HAS_COMMENT]->(c)
MERGE (u)-[:CREATED {timestamp: datetime() - duration('P2D')}]->(c);

MATCH (p:Post {id: '102'}), (c:Comment {id: '202'}), (u:User {username: 'QualAnon'})
MERGE (p)-[:HAS_COMMENT]->(c)
MERGE (u)-[:CREATED {timestamp: datetime() - duration('PT30M')}]->(c);

// Add session
MERGE (session1:Session {id: '501', status: 'Active', last_active: datetime()});
MATCH (u:User {username: 'user38599'}), (s:Session {id: '501'})
MERGE (u)-[:HAS_SESSION]->(s);